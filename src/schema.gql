# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AuthRegisterInput {
  email: String!
  lastname: String!
  name: String!
  password: String!
}

type AuthResponse {
  token: String
  user: User
}

type Cake {
  _createdAt: DateTime!
  _createdById: ID
  _updatedAt: DateTime!
  _updatedById: ID
  category: Category!
  description: String!
  id: ID!
  imageUrl: String
  isActive: Boolean!
  name: String!
  photos: [String!]
  slug: String
  user: User!
}

type Category {
  _createdAt: DateTime!
  _createdById: ID
  _updatedAt: DateTime!
  _updatedById: ID
  cakes: [Cake!]!
  description: String
  id: ID!
  imageUrl: String
  isActive: Boolean!
  name: String!
  slug: String
}

input CreateCakeInput {
  categoryId: String
  description: String!
  imageUrl: String
  name: String!
  photos: [String!]
  slug: String
}

input CreateCategoryInput {
  description: String
  imageUrl: String
  isActive: Boolean
  name: String!
  slug: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  AuthLogin(loginInput: LoginInput!): AuthResponse!
  AuthLogout: AuthResponse!
  AuthRegister(authRegisterInput: AuthRegisterInput!): AuthResponse!
  CakeCreate(createCakeInput: CreateCakeInput!): Cake!
  CakeDeactivate(id: ID!): Cake!
  CakeRemove(id: ID!): Cake!
  CakeUpdate(updateCakeInput: UpdateCakeInput!): Cake!
  CategoryCreate(createCategoryInput: CreateCategoryInput!): Category!

  """Seed the database"""
  Seed: Boolean!
  UserRemove(id: ID!): User!
  UserUpdate(updateUserInput: UpdateUserInput!): User!
}

type Query {
  AuthRevalite: AuthResponse!
  CakeFindOne(id: ID!): Cake!
  CakesFindAll(limit: Int = 10, offset: Int = 0, search: String): [Cake!]!
  CakesFindAllPublic(limit: Int = 10, offset: Int = 0, search: String): [Cake!]!
  CategoriesFindAll(limit: Int = 10, offset: Int = 0, search: String): [Category!]!
  UserFindOne(id: ID!): User!
  UsersFindAll(roles: [ValidRoles!] = []): [User!]!
}

input UpdateCakeInput {
  categoryId: String
  description: String
  id: ID!
  imageUrl: String
  isActive: Boolean!
  name: String
  photos: [String!]
  slug: String
}

input UpdateUserInput {
  email: String
  id: ID!
  isActive: Boolean
  lastname: String
  name: String
  password: String
  roles: [ValidRoles!]
}

type User {
  _createdAt: DateTime!
  _createdById: ID
  _updatedAt: DateTime!
  _updatedById: ID
  cakeCount: Int!
  cakes(limit: Int = 10, offset: Int = 0, search: String): [Cake!]!
  email: String!
  id: ID!
  isActive: Boolean!
  lastname: String!
  name: String!
  roles: [String!]!
}

"""Valid Roles"""
enum ValidRoles {
  admin
  root
  user
}